package ch2_객체지향.Ex38_제네릭;

import java.util.ArrayList;

/*
    - 제네릭(제네릭스) 이란 -
        프로그램에서 변수 선언할때나 메서드 선언할때 모든 것들은 자료형이 있다.
        대부분은 하나의 자료형으로 구현하지만, 변수나 메서드의 자료형을 필요에 따라 여러 자료형을 바꿀수 있게 해주는것

        어떤 값이 하나의 참조 자료의형이 아닌 여러 참조 자료형을 사용할수 있도록 프로그래밍 하는것을
        '제네릭 프로그래밍' 이라고 함

         '제네릭 프로그래밍' 의 장점은 참조 자료형이 변환될 때마다 컴파일러가 검증을 해주기 때문에 안정적이다.
         '컬렉션 프레임워크'의 많은 부분이 제네릭으로 구성되어 있음.

     장점
        1) 타입의 안정성
            의도하지 않은 타입의 객체가 저장되는걸 막음
            (다른 타입의 객체로 인해서 타입의 형태가 맞지 않아서 에러가 나는걸 방지)
            다른 자료형 들어오면 에러는 남
            
        2) 코드의 간결성
            타입을 미리 명시함으로써 다른 타입의 객체가 저장되지 않기 때문에 객체를 꺼내서 사용할때마다 형변환을 할 필요 없어서 코드를 간결하게 짤 수 있다.

    - 사용법 -
        다이아몬드 연산자 <> 를 이용한다
        T - Type
        K - Key
        V - Value
        E - Element(요소)
        N - Number
        ? - 모든타입(와일드카드)

 */
public class Ex38_1_제네릭 {
    public static void main(String[] args) {

        ArrayList<String> list = new ArrayList<>();

    }
}