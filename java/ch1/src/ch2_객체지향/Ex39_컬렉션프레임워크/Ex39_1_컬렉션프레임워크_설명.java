package ch2_객체지향.Ex39_컬렉션프레임워크;

/*
    = 컬렉션 프레임워크 =
        컬렉션은 다수의 데이터를 뜻함. 프레임워크는 표준화된 프로그래밍 방식을 의미함
        쉽게 말하면 데이터 그룹을 저장하는 클래스들을 표준화(효율적으로 저장/관리를 할수 있는 기능 제공)한 설계임
        (다수의 데이터를 하나의 그룹으로 묶어서 효율적으로 저장/관리 할 수 있는 기능을 제공)

        예를들어 배열은 크기가 고정되어 있고, 컬렉션 프레임워크 는 가변적인 특징을 갖는다.
        또한 데이터 삽입, 탐색, 정렬 같은 API가 제공됨

    = 컬렉선 프레임워크 에서 핵심은 인터페이스 =
        컬렉션 프레임워크 에서는 여러 인터페이스가 정의 되어 있고, 그 인터페이스를 구현한 많은 클래스들이 있다.
        대표적인 인터페이스는 List, Set, Map (Collection 이 최고 조상. 그 아래 List, Set 이 있음.  Map은 별개임)
        
        List: 순서가 있는 데이터의 집합
              데이터 중복 허용 
              ex) 출석부, 대기자 명단
              대표적인 하위 클래스: ArrayList

        Set: 순서가 없음
             데이터 중복 안됨
             ex) 양의 정수 집합, 소수의 집합
             대표적인 하위 클래스: HashSet

        Map: 키:값 으로 구성된 데이터의 집합
             순서가 없음, 키 중복 안됨, 값 중복 가능
             ex) 우편번호, 지역번호, 더콤마에서 ITEM_LIST 같은거
             대표적인 하위 클래스: HashMap
             
    = 컬렉션 프레임워크는 3가지 요소로 구성됨
        인터페이스: 각 컬렉션을 나타내는 추상 데이터에 대한 인터페이스(List, Set, Map)
                  클래스는 이 인터페이스를 구현하는 방식으로 작성되었기 때문에 동작 방법은 다 달라도 일관 조작법으로 사용할 수 있음
        클래스: 컬렉션 별 인터페이스의 구현
                같은 List 컬렉션 이어도 목적에따라 ArrayList, LinkedList 등으로 상세 구현이 달라질수 있다.
        알고리즘: 컬렉션이 제공하는 연산, 검색, 정렬, 셔플 등에 대한 메서드
 */


import java.util.ArrayList;

public class Ex39_1_컬렉션프레임워크_설명 {
    public static void main(String[] args) {
        String[] str = new String[3];
        ArrayList<String> list = new ArrayList<>();
    }
}
